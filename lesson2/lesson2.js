// Homework #2


/* 1) Дан код: 
  var a = 1, b = 1, c, d;         // Объявление сразу 4-х переменных для оптимазации памяти и написания кода;

  c = ++a; alert(c); // 2         // Переменной 'c' присваивается значение переменной 'a' (1) и прибавляется +1 префикосм ++,
                                     поэтому новый вызов 'c' дает резульат 2, переменная 'a' также поменяла значение 2;

  d = b++; alert(d); // 1         // Переменной 'd' присваивается значение переменной 'b' (undefined) и прибавляется +1 постфикосм ++,
                                     поэтому новый вызов 'd' дает резульат 1, переменная 'b' поменяла свое значение на 2;

  c = (2+ ++a); alert(c); // 5    // Переменной 'c' присваивается результат операции 2 + ++a(2), поскольку ранее 'a' поменяла
                                     свое значение на 2, то в результате мы получаем 2 + ++2(3) = 5;

  d = (2+ b++); alert(d); // 4    // Идентично с предыдущим выражением, но с одним нюаносм - двойка складывается с 'b'(2) с постфиксом
                                     на момент сложения 'b' остается 2 (2 + b(2) = 4), а уже после себе прибавляет +1,

  alert(a); // 3                  // 'a' два раза прибавлялась +1 префиксами, поэтому 3
  alert(b); // 3                  // 'b' два раза прибавлялась +1 постфиксами, поэтому тоже 3
Почему код даёт именно такие результаты? */


// 2) Чему будет равен x в примере ниже?
  // var a = 2;
  // var x = 1 + (a *= 2);
// console.log(x) // 5. Сначала выполняется результат в скобах, а затем за скобками (1 + 4 = 5), также 'a' поменяет свое значение на 4


/* 3) Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
  * если a и b положительные, вывести их разность;
  * если а и b отрицательные, вывести их произведение;
  * если а и b разных знаков, вывести их сумму;
  ноль можно считать положительным числом. */
const a = 6, b = 9;

if (Math.abs(a) === a && Math.abs(b) === b) {
  // console.log(a - b);
} else if (a < 0 && b < 0) {
  // console.log(a * b);
} else {
  // console.log(a + b);
}


// 4) Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
const x = 2;
switch (x) {
  case 0:
  case 1:
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
  case 7:
  case 8:
  case 9:
  case 10: 
  case 11:
  case 12:
  case 13:
  case 14:
  case 15:
    for (let i = x; i <= 15; i++) {
      // console.log(i)
    }
    break;
}


// 5) Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
const add = function(a, b) {
  return a + b;
}

const substraction = function(a, b) {
  return a - b;
}

const multiply = function(a, b) {
  return a * b;
}

const division = function(a, b) {
  return a / b;
}


// 6) Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (использовать switch).
const mathOperation = function(arg1, arg2, operation) {
  switch (operation) {
    case '+':
      return add(arg1, arg2);
    case '-':
      return substraction(arg1, arg2);
    case '*':
      return multiply(arg1, arg2);      
    case '/':
      return division(arg1, arg2);
    default:
      console.log(`The operation ${operation} is not valid.`)
  }
}

// console.log(mathOperation(3, 6, '*'));


// 7) * Сравнить null и 0. Попробуйте объяснить результат.
let n = null, z = 0;
// console.log(n === z);  // false. Это разные типы данных null(object), а 0(number). Однако если сравнивать так null >= 0
                          // то будет true, поскольку операторы сравнения и равенства работают по разному: оператор сравнения 
                          // пытаеся переконвертировать значения, когда как равенства нет.


// 8) * С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
function power(val, pow) {
  return pow <= 0 ? 1 : val * power(val, pow - 1)
}

// console.log(power(2, 4))